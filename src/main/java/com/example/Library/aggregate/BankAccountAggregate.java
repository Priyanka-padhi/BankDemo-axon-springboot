package com.example.Library.aggregate;

import com.example.Library.command.CreateAccountCommand;
import com.example.Library.command.CreditAmountCommand;
import com.example.Library.command.DebitAmountCommand;
import com.example.Library.event.AccountCreatedEvent;
import com.example.Library.event.AmountCreditedEvent;
import com.example.Library.event.AmountDebitedEvent;
import com.example.Library.exception.InSufficientBalanceException;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;

import java.math.BigDecimal;
import java.util.UUID;

@Getter
@AllArgsConstructor
@NoArgsConstructor
@Aggregate
public class BankAccountAggregate {
    @AggregateIdentifier
    private UUID accId;
    private String accountHolderName;
    private BigDecimal balance;

    /*
    AggragateLifeCycle component is used to notify the Aggregate that a new BankAccount was created by publishing
    the AccountCreatedEvent
     */
    @CommandHandler
    public BankAccountAggregate(CreateAccountCommand command) {
        AggregateLifecycle.apply(new AccountCreatedEvent(command.getAccountId(),
                command.getInitialBalance(),
                command.getAccountHolderName()));
    }

/*
if we dispatched a Command, we defined its CommandHandler.
Now, as we dispatched an Event, we need to define the EventHandler:
 */

    @EventSourcingHandler           //The @EventSourcingHandler will define the annotated method as a handler for Events generated by that Aggregate.
    public void on(AccountCreatedEvent event) {

        this.accId = event.getId();
        this.balance = event.getInitialBalance();
        this.accountHolderName = event.getAccountHolderName();
    }

    @CommandHandler
    public void handle(CreditAmountCommand command){

        AggregateLifecycle.apply(new AmountCreditedEvent(command.getAccountId(),
                command.getCreditAmount()));
    }

    @EventSourcingHandler
    public void on(AmountCreditedEvent event){

        this.balance = this.balance.add(event.getCreditAmount());
    }

    @CommandHandler
    public void handle(DebitAmountCommand command){

        AggregateLifecycle.apply(new AmountDebitedEvent(command.getAccountId(),
                command.getDebitAmount()));
    }

    @EventSourcingHandler
    public void on(AmountDebitedEvent event)throws InSufficientBalanceException {

        if(this.balance.compareTo(event.getDebitAmount()) < 0){

            throw new InSufficientBalanceException();
        }
        this.balance = this.balance.subtract(event.getDebitAmount());
    }


}